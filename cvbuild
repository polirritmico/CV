#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   CVBuild
#  DESCRIPTION:   A script to build a Awesome LaTeX CV into a PDF file.
#         DATE:   2022/05/21
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail


#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------

SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A script to build a Awesome LaTeX CV into a PDF file."
SCRIPT_NAME="CVBuild"
DEFAULT_FILE="curriculum.tex"
DEFAULT_LETTER="carta.tex"

# Terminal output colors
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
NC="\033[0m" # No color

# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"


#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$SCRIPT_NAME v$SCRIPT_VERSION, ${SHORT_DESCRIPTION,}"

}  # ------------  end of function version  ------------


#===  FUNCTION  ================================================================
#         NAME:   help
#  DESCRIPTION:   Show the script usage and documentation help
#===============================================================================
function help()
{
    echo -e "Usage: $SCRIPT_RUN [FILE]
       $SCRIPT_RUN [OPTION]... [FILE] [OUTFILE]
       $SCRIPT_RUN -l [OUTFILE]
Make a filename.pdf (or OUTFILE) from the input tex FILE.
If no input FILE is entered, the default $DEFAULT_FILE file is built.

Options:
  -p|presentation [FILE]   Replace the default CV presentation text with the
                           passed FILE content.
  -o|output [FILE]         Set the OUTFILE. Useful when no input FILE is passed.
  -l|letter                Set $DEFAULT_LETTER as input FILE. 
  -h|help                  Display this help message.
  -v|version               Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------


#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------

presentation_file=""
input_file="curriculum.tex"
output_file=""
letter=0
max_args=2 # Max. args with non options should be 2, input and output file

#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":p:o:lhv" opt
    do
        case $opt in
            p|presentation)
                presentation_file=$OPTARG
                ;;
            o|output)
                output_file=$OPTARG
                ((max_args--))
                ;;
            l|letter)
                letter=1
                input_file=$DEFAULT_LETTER
                ((max_args--))
                ;;
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            :)
                echo "Invalid option: '-$OPTARG' requires an argument"
                help
                exit 1
                ;;
            *)
                echo -e "$SCRIPT_NAME: Invalid option -- '-$OPTARG'"
                help
                exit 1
                ;;
    esac
done    # ----------  end of getopts handler  ----------
shift $(($OPTIND-1))


#-------------------------------------------------------------------------------
# Check and read IN/OUT files
#-------------------------------------------------------------------------------

if [[ $# -gt max_args ]]; then
    echo -e "$SCRIPT_NAME: Unable to infer IN/OUT file. Read script usage.\n"
    help
    exit 1
fi

if [[ $letter -eq 1 && $# -eq 1 ]]; then
    output_file=$1
    shift
elif [[ $# -gt 0 ]]; then
    input_file=$1
    shift
fi

if [[ $# -gt 0 ]]; then
    output_file=$1
    shift
fi


#===  FUNCTION  ================================================================
#         NAME:   MakePDF
#  DESCRIPTION:   Build the PDF file with xelatex
#===============================================================================
function makepdf()
{
    filename=$(basename -- "$input_file")
    extension="${filename##*.}"
    filename="${filename%.*}"

    echo -e "Generando PDF a partir de $ORANGE$input_file$NC"
    xelatex -synctex=1 -interaction=batchmode -halt-on-error "$input_file"
    echo -e "\n$GREENOK$NC\n$ORANGE$filename.pdf$NC generado exitosamente."

}  # ------------  end of function makepdf  ------------


makepdf
