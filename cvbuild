#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   CVBuild
#  DESCRIPTION:   A script to generate a Awesome LaTeX CV PDF file.
#         DATE:   2022/05/21
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail

#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------

SCRIPT_NAME="CVBuild"
SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A script to generate a Awesome LaTeX CV PDF file."

DEFAULT_FILE="curriculum.tex"
DEFAULT_LETTER="carta.tex"

DEPENDENCIES=( "xelatex" )

# Terminal output font styles and colors
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
CYAN="\033[0;36m"
RED="\e[31m"
BLD="\033[1m" # Bold
ITL="\033[3m" #Italic
NS="\033[0m" # No style

STLCMD="\033[1;36m"
STLOPT="\033[1;32m"
STLARG="\033[1;32m"
STLFIL="\033[0;33m"
STLERR="\e[0;31m"
STLUND="\e[4m"

# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------

missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
    if ! command -v $dependency > /dev/null 2>&1; then
        echo -e "$RED$SCRIPT_RUN: Could't find '$dependency' on the system."\
                                 "Check if is installed.$NS"
        ((++missing_deps))
    fi
done

if [[ $missing_deps -gt 0 ]]; then
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Check file
#  DESCRIPTION:   Check if the input file exist
#===============================================================================
function check_file()
{
    if [[ ! -f $1 ]]; then
        echo -e "${RED}$SCRIPT_RUN: $1: No such file or directory.$NS"
        exit 1
    fi

}  # ------------  end of function check_file  ------------



#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
    echo -e "$ITL$SHORT_DESCRIPTION$NS\n"

}  # ------------  end of function version  ------------



#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help
#===============================================================================
function help()
{
    echo -e "${BLD}Usage: $STLCMD$SCRIPT_RUN $STLARG[FILE]
       $STLCMD$SCRIPT_RUN $STLARG[OPTION]... [FILE] [OUTFILE]
       $STLCMD$SCRIPT_RUN $STLARG-l [OUTFILE]$NS
Make a filename.pdf (or OUTFILE) from the input tex FILE.
If no input FILE is entered, the default $DEFAULT_FILE file is built.

${BLD}Options:
$STLOPT  -p|presentation [FILE]   ${NS}Replace the default CV presentation text with the
$STLOPT                           ${NS}passed FILE content.
$STLOPT  -o|output [FILE]         ${NS}Set the OUTFILE. Useful when no input FILE is passed.
$STLOPT  -l|letter                ${NS}Set $DEFAULT_LETTER as input FILE. 
$STLOPT  -h|help                  ${NS}Display this help message.
$STLOPT  -v|version               ${NS}Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------



#===  FUNCTION  ================================================================
#         NAME:   MakePDF
#  DESCRIPTION:   Build the PDF file with xelatex
#===============================================================================
function makepdf()
{
    filename=$(basename -- "$input_file")
    extension="${filename##*.}"
    filename="${filename%.*}"

    echo -e "Generating PDF file from $ORANGE$input_file$NS with xelatex..."
    #xelatex -synctex=1 -interaction=batchmode -halt-on-error "$input_file"
    echo -e "\n${GREEN}OK$NS\nFile$ORANGE $filename.pdf$NS has been generated."

}  # ------------  end of function makepdf  ------------



#===  FUNCTION  ================================================================
#         NAME:   Move file
#  DESCRIPTION:   Move or rename the output FILE.pdf to OUTFILE.
#                 Add .pdf extension if not provided
#===============================================================================
function move_file()
{
    if [[ $output_file != *.pdf ]]; then
        output_file="$output_file.pdf"
    fi
    echo -e "Se mueve salida a $output_file"
    #mv $input_file $output_file

}  # ------------  end of function move_file  ------------



#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------

presentation_file=""
input_file="curriculum.tex"
output_file=""
letter=0
max_args=2 # Max. args with non options should be 2, input and output file


#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":p:o:lhv" opt
    do
        case $opt in
            p|presentation)
                presentation_file=$OPTARG
                ;;
            o|output)
                output_file=$OPTARG
                ((max_args--))
                ;;
            l|letter)
                letter=1
                input_file=$DEFAULT_LETTER
                ((--max_args))
                ;;
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            :)
                echo -e "$STLERR$SCRIPT_NAME:"\
                        "Invalid option -- '-$OPTARG' requires an argument$NS\n"
                help
                exit 1
                ;;
            *)
                echo -e "$STLERR$SCRIPT_NAME: Invalid option -- '-$OPTARG'$NS\n"
                help
                exit 1
                ;;
    esac
done    # ----------  end of getopts handler  ----------
shift $(($OPTIND-1))


#-------------------------------------------------------------------------------
# Check and read IN/OUT files
#-------------------------------------------------------------------------------

if [[ $# -gt max_args ]]; then
    echo -e "$RED$SCRIPT_NAME: Unable to infer IN/OUT file."\
            "Read script usage.$NS\n"
    help
    exit 1
fi

if [[ $letter -eq 1 && $# -eq 1 ]]; then
    output_file=$1
    shift
elif [[ $# -gt 0 ]]; then
    input_file=$1
    shift
fi

if [[ $# -gt 0 ]]; then
    output_file=$1
    shift
fi

#===============================================================================
# BEGINNING OF SCRIPT WORK
#===============================================================================

#-------------------------------------------------------------------------------
# 
#-------------------------------------------------------------------------------

if [[ $presentation_file != "" ]]; then
    check_file $presentation_file
    #readfile $presentation_file
    #change presentation input
fi
#makepdf
#revert presentation change
if [[ $output_file != "" ]]; then
    move_file
fi

