#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   CVBuild
#       AUTHOR:   Eduardo Bray. htttps://github.com/polirritmico
#  DESCRIPTION:   A script to generate a Awesome LaTeX CV PDF file.
#         DATE:   2022/05/21
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail

#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------
SCRIPT_NAME="CVBuild"
SCRIPT_VERSION="0.4"
SHORT_DESCRIPTION="A script to generate a Awesome LaTeX CV PDF file."

DEFAULT_INPUT_FILE="curriculum"
DEFAULT_LETTER="carta"
DEFAULT_EN_LETTER="letter"
TEMP_FILE="_temp_cvbuild_file"
VERBOSE_BUILD=false # silent, quiet

DEPENDENCIES=("xelatex" "xdg-open")

#----------------------------------------
# Terminal output font styles and colors
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
RED="\e[31m"
BLD="\033[1m" # Bold
ITL="\033[3m" # Italic
NS="\033[0m"  # No style

STLCMD="\033[1;36m"
STLOPT="\033[1;32m"
STLARG="\033[1;32m"
STLERR="\e[0;31m"

# HACK: Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------
missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
  if ! command -v "$dependency" >/dev/null 2>&1; then
    echo -e "$RED$SCRIPT_RUN: Could't find '$dependency' on the system." \
      "Check if is installed.$NS"
    ((++missing_deps))
  fi
done
if [[ $missing_deps -gt 0 ]]; then
  exit 1
fi

#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version() {
  echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
  echo -e "$ITL$SHORT_DESCRIPTION$NS\n"

} # ------------  end of function version  ------------

#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help
#===============================================================================
function help() {
  echo -e "${BLD}Usage: ${STLCMD}${SCRIPT_RUN} ${STLARG}[FILE]
       ${STLCMD}${SCRIPT_RUN} ${STLARG}[OPTION]... [FILE] [OUTFILE]
       ${STLCMD}${SCRIPT_RUN} ${STLARG}-l [OUTFILE]${NS}
Make a filename.pdf (or OUTFILE) from the input tex FILE.
If no input FILE is entered, the default '${DEFAULT_INPUT_FILE}' file is built.
If FILE has no extension '.tex' is added.

${BLD}Options:
${STLOPT}  -p (presentation) [FILE] ${NS}Replace the default CV presentation text with
${STLOPT}                           ${NS}the passed FILE content.
${STLOPT}  -o (output) [FILE]       ${NS}Set the OUTFILE. Useful when no input FILE is
${STLOPT}                           ${NS}passed.
${STLOPT}  -l (letter)              ${NS}Set ${DEFAULT_LETTER}/${DEFAULT_EN_LETTER} as input FILE.
${STLOPT}  -e (english)             ${NS}Set ifspanish to false.
${STLOPT}  -w (watch)               ${NS}Open the pdf after the build process.
${STLOPT}  -i (images)              ${NS}Generate preview images.
${STLOPT}  -h (help)                ${NS}Display this help message.
${STLOPT}  -v (version)             ${NS}Display the version of ${SCRIPT_NAME} and exit."

} # ------------  end of function help  ------------

#===  FUNCTION  ================================================================
#         NAME:   Set english
#  DESCRIPTION:   Change ifspanish LaTeX value to false.
#    ARGUMENTS:   $1: File to edit.
#                 $2: Boolean value
#===============================================================================
function set_english() {
  if [ "$2" = true ]; then
    echo -en "${ITL}Setting language to english...${NS} "
    sed -i 's/\\spanishtrue/\\spanishfalse/' "$1"
    echo -e "${GREEN}OK.$NS"
  else
    sed -i 's/\\spanishfalse/\\spanishtrue/' "$1"
  fi
} # ------------  end of function set_english  ------------

#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------
input_file=""
output_file=""
presentation_file=""

max_args=2 # Max. args with non options should be 2, input and output file
letter_mode=false
images_mode=false
watch=false
need_backup=false
english=false

#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":p:o:liewhv" opt; do
  case $opt in
  p) # Presentation
    presentation_file=$OPTARG
    ;;
  o) # Output file
    output_file=$OPTARG
    ((max_args--))
    ;;
  l) # Letter mode
    letter_mode=true
    ((max_args--))
    ;;
  i) # Images mode
    images_mode=true
    ((max_args--))
    ;;
  e) # Set english mode
    english=true
    ((max_args--))
    ;;
  w) # Watch, open after
    watch=true
    ;;
  h) # Help
    version
    help
    exit 0
    ;;
  v) # Version
    version
    exit 0
    ;;
  :)
    echo -e "$STLERR$SCRIPT_NAME:" \
      "Invalid option -- '-$OPTARG' requires an argument$NS\n"
    help
    exit 1
    ;;
  *)
    echo -e "$STLERR$SCRIPT_NAME: Invalid option -- '-$OPTARG'$NS\n"
    help
    exit 1
    ;;
  esac
done # ----------  end of getopts handler  ----------
shift $((OPTIND - 1))

#-------------------------------------------------------------------------------
# Check for extra arguments, bad combinations and get IN/OUT files
#-------------------------------------------------------------------------------
if [[ $# -gt max_args ]]; then
  echo -e "$RED$SCRIPT_NAME: Unable to infer IN/OUT file." \
    "Read script usage.$NS\n"
  exit 1
fi

if [[ $letter_mode = true && $presentation_file != "" ]]; then
  echo -e "$RED$SCRIPT_NAME: Letter and presentation can't be" \
    "used at the same time.$NS"
  exit 1
fi

# If letter mode is used, then no input file is needed and the
# remaining arg should be outfile.
if [[ $letter_mode = true && $# -eq 1 ]]; then
  output_file=$1
  shift
# Either -o is used or not, the first remaining arg should be the inputfile
elif [[ $# -gt 0 ]]; then
  input_file=$1
  shift
fi
# Lastly if no '-o' is passed there could be a outfile arg remaining
if [[ $# -gt 0 ]]; then
  output_file=$1
  shift
fi

#===  FUNCTION  ================================================================
#         NAME:   Check file
#  DESCRIPTION:   Check if the passed FILE exist.
#    ARGUMENTS:   $1: FILE, $2: Description
#===============================================================================
function check_file() {
  echo -en "Checking ${2,,}: $ORANGE'$1'$NS... "
  # -d check a directory
  if [[ -d $1 ]]; then
    echo -e "\n${RED}$SCRIPT_RUN: '$1': Is a directory.$NS"
    exit 1
  # -f check if file exist
  elif [[ ! -f $1 ]]; then
    echo -e "\n${RED}$SCRIPT_RUN: '$1': No such file or directory.$NS"
    exit 1
  fi
  echo -e "${GREEN}OK.$NS"

} # ------------  end of function check_file  ------------

#===  FUNCTION  ================================================================
#         NAME:   Change presentation
#  DESCRIPTION:   Copy the input File to the passed destination, then replace
#                 the presentation file with the setted one on the copied file.
#    ARGUMENTS:   $1: Input file, $2: Presentation file
#===============================================================================
function change_presentation() {
  echo -en "Replacing presentation file with: $ORANGE'$1'$NS... "
  cp "$1" "$TEMP_FILE"
  # $1 could contain '/' so we need to make the substitution inside call
  sed -i "s/\\input{sections\/resumen.tex}/\\input\{${2//\//\\/}\}/" "$TEMP_FILE"
  echo -e "${GREEN}OK.$NS"

} # ------------  end of function change_presentation  ------------

#===  FUNCTION  ================================================================
#         NAME:   Make PDF
#  DESCRIPTION:   Build the PDF file with xelatex
#    ARGUMENTS:   $1: Target, $2: bool, if true passed $3: base file for message
#===============================================================================
function make_pdf() {
  if [[ $2 = true ]]; then
    _source_tex="$3"
  else
    _source_tex="$1"
  fi
  echo -e "Generating PDF file from $ORANGE'$_source_tex'$NS with xelatex..."
  echo -e "-----------------------------------------------------------"

  if [[ $VERBOSE_BUILD = true ]]; then
    xelatex -synctex=1 -halt-on-error "$1"
  else
    xelatex -synctex=1 -interaction=batchmode -halt-on-error "$1"
  fi
  #echo -e "\n${GREEN}OK.$NS\nFile$ORANGE ${2%.*}.pdf$NS has been generated."
  echo -e "\n-----------------------------------------------------------"

} # ------------  end of function make_pdf  ------------

#===============================================================================
# BEGINNING OF SCRIPT WORK
#===============================================================================

#-------------------------------------------------------------------------------
# Generate images from existing pdf
#-------------------------------------------------------------------------------
if [[ $images_mode = true ]]; then
  echo -e "Generating images..."
  convert -density 150 curriculum.pdf[0] -background white -alpha remove -quality 90 images/preview-1.png
  convert -density 150 curriculum.pdf[1] -background white -alpha remove -quality 90 images/preview-2.png
  echo -e "Done"
  exit
fi

#-------------------------------------------------------------------------------
# Prepare paths
#-------------------------------------------------------------------------------
if [[ $letter_mode = true && $english = true ]]; then
  input_file="$DEFAULT_EN_LETTER.tex"
elif [[ $letter_mode = true ]]; then
  input_file="$DEFAULT_LETTER.tex"
elif [[ $input_file == "" ]]; then
  input_file="$DEFAULT_INPUT_FILE.tex"
elif [[ $input_file != *.tex ]]; then
  input_file="$input_file.tex"
fi

if [[ $output_file == "" ]]; then
  if [[ $letter_mode = true && $english = true ]]; then
    output_file="$DEFAULT_EN_LETTER.pdf"
  elif [[ $letter_mode = true ]]; then
    output_file="$DEFAULT_LETTER.pdf"

  elif [[ $english = true ]]; then
    output_file="${DEFAULT_INPUT_FILE}_en.pdf"
  else
    output_file="$DEFAULT_INPUT_FILE.pdf"
  fi
elif [[ $output_file != *.pdf ]]; then
  output_file="$output_file.pdf"
fi

#-------------------------------------------------------------------------------
# Generate the PDF file and also move and clean extra files
#-------------------------------------------------------------------------------
check_file "$input_file" "Input file"

set_english "$input_file" "$english"

# If for example, cv.pdf already exist and we use cv.tex as input and other.pdf
# as output, then the existing cv.pdf should be preserved. Therefore we need
# make a backup before the make_pdf function.
if [[ ${input_file%.*} != "${output_file%.*}" && -f ${input_file%.*}.pdf ]]; then
  need_backup=true
fi

if [[ $presentation_file != "" ]]; then
  check_file "$presentation_file" "presentation file"
  change_presentation "$input_file" "$presentation_file"
  make_pdf "$TEMP_FILE" true "$input_file"
  echo -e "${GREEN}OK.$NS PDF file has been generated."

  mv "$TEMP_FILE.pdf" "$output_file"
  echo -e "File$ORANGE $output_file$NS with $ORANGE'$presentation_file'$NS" \
    "has\nbeen successfully generated."
  rm "$TEMP_FILE*"
else
  if [[ $need_backup = true ]]; then
    mv "${input_file%.*}.pdf" "$TEMP_FILE.pdf"
  fi

  make_pdf "$input_file" false
  if [[ "${input_file%.*}.pdf" != "$output_file" ]]; then
    mv "${input_file%.*}.pdf" "$output_file"
  fi

  # Restore the backup if needed
  if [[ $need_backup = true ]]; then
    mv "$TEMP_FILE.pdf" "${input_file%.*}.pdf"
  fi
  echo -e "File$ORANGE '${output_file}'$NS has been successfully generated."
fi

#----------------------------------------
# Open the generated file
if [[ $watch = true ]]; then
  xdg-open "${output_file}" 2>/dev/null
fi

exit 0
