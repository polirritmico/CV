#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   CVBuild
#  DESCRIPTION:   A script to generate a Awesome LaTeX CV PDF file.
#         DATE:   2022/05/21
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail


#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------

SCRIPT_NAME="CVBuild"
SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A script to generate a Awesome LaTeX CV PDF file."

DEFAULT_FILE="curriculum.tex"
DEFAULT_LETTER="carta.tex"
#DEFAULT_PRESENTATION="sections/resumen.tex"
TEMP_CVBUILD_FILE="_cvbuil_temp_file.tex"

DEPENDENCIES=( "xelatex" )


#----------------------------------------
# Terminal output font styles and colors
# TODO: Remove unnused and fix var syntax
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
CYAN="\033[0;36m"
RED="\e[31m"
BLD="\033[1m" # Bold
ITL="\033[3m" #Italic
NS="\033[0m" # No style

STLCMD="\033[1;36m"
STLOPT="\033[1;32m"
STLARG="\033[1;32m"
STLFIL="\033[0;33m"
STLERR="\e[0;31m"
STLUND="\e[4m"

# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"


#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------

missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
    if ! command -v $dependency > /dev/null 2>&1; then
        echo -e "$RED$SCRIPT_RUN: Could't find '$dependency' on the system."\
                                 "Check if is installed.$NS"
        ((++missing_deps))
    fi
done

if [[ $missing_deps -gt 0 ]]; then
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
    echo -e "$ITL$SHORT_DESCRIPTION$NS\n"

}  # ------------  end of function version  ------------



#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help
#===============================================================================
function help()
{
    echo -e "${BLD}Usage: $STLCMD$SCRIPT_RUN $STLARG[FILE]
       $STLCMD$SCRIPT_RUN $STLARG[OPTION]... [FILE] [OUTFILE]
       $STLCMD$SCRIPT_RUN $STLARG-l [OUTFILE]$NS
Make a filename.pdf (or OUTFILE) from the input tex FILE.
If no input FILE is entered, the default $DEFAULT_FILE file is built.
If FILE has no extension '.tex' is added.

${BLD}Options:
$STLOPT  -p|presentation [FILE]   ${NS}Replace the default CV presentation text with the
$STLOPT                           ${NS}passed FILE content.
$STLOPT  -o|output [FILE]         ${NS}Set the OUTFILE. Useful when no input FILE is passed.
$STLOPT  -l|letter                ${NS}Set $DEFAULT_LETTER as input FILE. 
$STLOPT  -h|help                  ${NS}Display this help message.
$STLOPT  -v|version               ${NS}Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------



#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------

presentation_file=""
input_file="$DEFAULT_FILE"
output_file=""
letter_mode=false
max_args=2 # Max. args with non options should be 2, input and output file


#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":p:o:lhv" opt
    do
        case $opt in
            p|presentation)
                presentation_file=$OPTARG
                ;;
            o|output)
                output_file=$OPTARG
                ((--max_args))
                ;;
            l|letter)
                letter_mode=true
                input_file="$DEFAULT_LETTER"
                ((--max_args))
                ;;
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            :)
                echo -e "$STLERR$SCRIPT_NAME:"\
                        "Invalid option -- '-$OPTARG' requires an argument$NS\n"
                help
                exit 1
                ;;
            *)
                echo -e "$STLERR$SCRIPT_NAME: Invalid option -- '-$OPTARG'$NS\n"
                help
                exit 1
                ;;
    esac
done    # ----------  end of getopts handler  ----------
shift $(($OPTIND-1))


#-------------------------------------------------------------------------------
# Check for extra arguments, bad combinations and get IN/OUT files
#-------------------------------------------------------------------------------

if [[ $# -gt max_args ]]; then
    echo -e "$RED$SCRIPT_NAME: Unable to infer IN/OUT file."\
            "Read script usage.$NS\n"
    exit 1
fi

if [[ $letter_mode = true && $presentation_file != "" ]]; then
    echo -e "$RED$SCRIPT_NAME: Letter and presentation can't be"\
            "used at the same time.$NS"
    exit 1
fi

# If letter mode is used, then no input file is needed and the
# remaining arg should be outfile.
if [[ $letter_mode = true && $# -eq 1 ]]; then
    echo letter mode
    output_file=$1
    shift
# Either -o is used or not, the first remaining arg should be the inputfile
elif [[ $# -gt 0 ]]; then
    # If the argument has no tex extension, we add it here.
    if [[ $1 != *.tex ]]; then
        input_file="$1.tex"
    else
        input_file=$1
    fi
    shift
fi
# Lastly if no '-o' is passed there could be a outfile arg remaining
if [[ $# -gt 0 ]]; then
    output_file=$1
    shift
fi

#===  FUNCTION  ================================================================
#         NAME:   Make PDF
#  DESCRIPTION:   Build the PDF file with xelatex
#    ARGUMENTS:   $1: Target
#===============================================================================
function make_pdf()
{
    filename=$(basename -- "/test/file.tex")
    echo $filename
    filename="${filename%.*}"
    echo $filename

    echo -e "Generating PDF file from $ORANGE$1$NS with xelatex..."
    xelatex -synctex=1 -interaction=batchmode -halt-on-error "$input_file"
    echo -e "\n${GREEN}OK.$NS\nFile$ORANGE $filename.pdf$NS has been generated."

}  # ------------  end of function make_pdf  ------------



#===  FUNCTION  ================================================================
#         NAME:   Move output file
#  DESCRIPTION:   Move or rename the output FILE.pdf to OUTFILE. Adds pdf
#                 extension if not provided.
#    ARGUMENTS:   $1: FILE, $2: Target.
#===============================================================================
function move_output_file()
{
    if [[ $2 != *.pdf ]]; then
        output_file="$output_file.pdf"
    fi
    echo -en "Moving $1 to $2..."
    #mv $input_file $output_file


}  # ------------  end of function move_output_file  ------------



#===  FUNCTION  ================================================================
#         NAME:   Check file
#  DESCRIPTION:   Check if the passed FILE exist.
#    ARGUMENTS:   $1: Description, $2 FILE
#===============================================================================
function check_file()
{
    echo -en "Checking $1: '$ORANGE$2$NS'... "
    # -d check a directory
    if [[ -d $2 ]]; then
        echo -e "\n${RED}$SCRIPT_RUN: '$2': Is a directory.$NS"
        exit 1
    #-f check if file exist
    elif [[ ! -f $2 ]]; then
        echo -e "\n${RED}$SCRIPT_RUN: '$2': No such file or directory.$NS"
        exit 1
    fi
    echo -e "${GREEN}OK.$NS"

}  # ------------  end of function check_file  ------------



#===  FUNCTION  ================================================================
#         NAME:   Change presentation
#  DESCRIPTION:   Copy the input File to the passed destination, then replace
#                 the presentation file with the setted one on the copied file.
#    ARGUMENTS:   $1: Presentation file, $2: Working temp file 
#===============================================================================
function change_presentation()
{
    echo -en "Replacing presentation file with:"\
            "'$ORANGE$1$NS'... "
    cp $input_file $2
    # $1 could contain '/' so we need to make the substitution inside call
    sed -i "s/\\input{sections\/resumen.tex}/\\input\{${1//\//\\/}\}/" $2
    echo -e "${GREEN}OK.$NS"

}  # ------------  end of function change_presentation  ------------



#===============================================================================
# BEGINNING OF SCRIPT WORK
#===============================================================================

check_file "input file" $input_file

if [[ $presentation_file != "" ]]; then
    check_file "presentation file" $presentation_file
    change_presentation $presentation_file $TEMP_CVBUILD_FILE
    make_pdf $TEMP_CVBUILD_FILE
    move_output_file $TEMP_CVBUILD_FILE $output_file
    #clean presentation
fi
#elif [[ condition ]]; then
    

if [[ $output_file != "" ]]; then
    move_file
fi

